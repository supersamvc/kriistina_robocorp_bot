import React, { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import StyleEditor from './components/StyleEditor';
import './App.css';

// –¢–∏–ø—ã –¥–ª—è Telegram Web App
declare global {
  interface Window {
    Telegram: {
      WebApp: {
        initData: string;
        initDataUnsafe: {
          user?: {
            id: number;
            first_name: string;
            last_name?: string;
            username?: string;
            language_code?: string;
          };
        };
        ready(): void;
        expand(): void;
        MainButton: {
          show(): void;
          hide(): void;
          setText(text: string): void;
          onClick(callback: () => void): void;
        };
        version: string;
      };
    };
  }
}

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface UserStyle {
  id?: number;
  user_id: number;
  style_summary: string;
  positive_lexicon: string[];
  negative_lexicon: string[];
  writing_style: {
    tone: string;
    formality: string;
    emoji_usage: string;
    paragraph_length: string;
  };
  examples: string[];
}

interface TelegramUser {
  id: number;
  firstName: string;
  lastName?: string;
  username?: string;
  languageCode?: string;
}

function App() {
  const [user, setUser] = useState<TelegramUser | null>(null);
  const [userStyle, setUserStyle] = useState<UserStyle | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
  const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
  const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!supabaseUrl || !supabaseKey) {
    console.error('Missing Supabase environment variables:', {
      REACT_APP_SUPABASE_URL: !!supabaseUrl,
      REACT_APP_SUPABASE_ANON_KEY: !!supabaseKey
    });
  }
  
  const supabase = createClient(supabaseUrl || '', supabaseKey || '');

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const initializeTelegramApp = () => {
      if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        console.log('Telegram Web App –¥–æ—Å—Ç—É–ø–µ–Ω. –í–µ—Ä—Å–∏—è:', tg.version);
        console.log('Init data:', tg.initData);
        console.log('User data:', tg.initDataUnsafe.user);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
        tg.ready();
        tg.expand();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const telegramUser = tg.initDataUnsafe.user;
        
        if (telegramUser) {
          const user: TelegramUser = {
            id: telegramUser.id,
            firstName: telegramUser.first_name,
            lastName: telegramUser.last_name,
            username: telegramUser.username,
            languageCode: telegramUser.language_code
          };
          
          console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Telegram:', user);
          setUser(user);
          loadUserStyle(user.id);
          return true;
        } else {
          console.warn('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
          return false;
        }
      } else {
        console.warn('Telegram Web App API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return false;
      }
    };
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram Web App
    const telegramInitialized = initializeTelegramApp();
    
    // –ï—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
    if (!telegramInitialized) {
      console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º');
      const demoUser: TelegramUser = {
        id: 123456789,
        firstName: 'Demo User',
        username: 'demo_user'
      };
      
      setUser(demoUser);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–º–æ-—Ä–µ–∂–∏–º
      if (process.env.REACT_APP_DEMO_MODE === 'true') {
        loadDemoUserStyle();
      } else {
        loadUserStyle(demoUser.id);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const loadDemoUserStyle = () => {
    setLoading(true);
    setError(null);
    
    console.log('Loading demo user style');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      const demoStyle: UserStyle = {
        id: 1,
        user_id: 123456789,
        style_summary: 'üéØ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –∂–∏–≤–æ–π —Å—Ç–∏–ª—å —Å —è—Ä–∫–∏–º–∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏ –∏ –ª–∏—á–Ω—ã–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É—é —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤, –ø–∏—à—É –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –≥–ª—É–±–æ–∫–æ.',
        positive_lexicon: [
          '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '–ø–æ—Ç—Ä—è—Å–∞—é—â–µ', '–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π', 'breakthrough',
          'game-changer', '–∏–Ω—Å–∞–π—Ç', '–æ–∑–∞—Ä–µ–Ω–∏–µ', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è'
        ],
        negative_lexicon: [
          '–±–∞–Ω–∞–ª—å–Ω–æ', '—Å–∫—É—á–Ω–æ', '–æ—á–µ–≤–∏–¥–Ω–æ', '–∏–∑–±–∏—Ç–æ',
          '—à–∞–±–ª–æ–Ω–Ω–æ', '–ø–æ–ø—Å–∞', '–º–µ–π–Ω—Å—Ç—Ä–∏–º'
        ],
        writing_style: {
          tone: 'enthusiastic',
          formality: 'casual',
          emoji_usage: 'frequent',
          paragraph_length: 'short'
        },
        examples: [
          'üöÄ –°–µ–≥–æ–¥–Ω—è –ø–æ–Ω—è–ª: —É—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∏—à–Ω–∞—è —á–µ—Ä—Ç–∞, –∞ –∫–∞—á–µ—Å—Ç–≤–æ –±–µ–≥–∞. –ö–æ–≥–¥–∞ –º—ã –ø–µ—Ä–µ—Å—Ç–∞–µ–º –¥—É–º–∞—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ, –º–∞–≥–∏—è —Å–ª—É—á–∞–µ—Ç—Å—è —Å–∞–º–∞ —Å–æ–±–æ–π.',
          'üí° –ù–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç: —Å–∞–º—ã–µ –∫—Ä—É—Ç—ã–µ –∏–¥–µ–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–µ –≤–æ –≤—Ä–µ–º—è –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞, –∞ –≤ –¥—É—à–µ, –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–µ –∏–ª–∏ –∑–∞ –º—ã—Ç—å–µ–º –ø–æ—Å—É–¥—ã. –ú–æ–∑–≥ –ª—é–±–∏—Ç –±–µ–∑–¥–µ–ª—å–µ –¥–ª—è creativity.',
          'üî• –ü–∞—Ä–∞–¥–æ–∫—Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: —á–µ–º –±–æ–ª—å—à–µ –º—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º, —Ç–µ–º –º–µ–Ω—å—à–µ –¥–µ–ª–∞–µ–º. –ê —á–µ–º –±–æ–ª—å—à–µ –¥–µ–ª–∞–µ–º, —Ç–µ–º –º–µ–Ω—å—à–µ –Ω—É–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å. –î–µ–π—Å—Ç–≤–∏–µ —Ä–æ–∂–¥–∞–µ—Ç —è—Å–Ω–æ—Å—Ç—å.'
        ]
      };
      
      setUserStyle(demoStyle);
      setLoading(false);
    }, 1000);
  };

  const loadUserStyle = async (userId: number) => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('Loading user style for user:', userId);
      console.log('Supabase URL:', supabaseUrl);
      console.log('Supabase Key present:', !!supabaseKey);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
      if (!supabaseUrl || !supabaseKey) {
        throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data, error } = await supabase
        .from('user_styles')
        .select('*')
        .eq('user_id', userId)
        .single();

      console.log('Supabase response:', { data, error });

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        console.error('Supabase error:', error);
        throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
      }

      if (data) {
        console.log('User style loaded:', data);
        setUserStyle(data);
      } else {
        console.log('No user style found, creating default');
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const defaultStyle: UserStyle = {
          user_id: userId,
          style_summary: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å —Å –ª–µ–≥–∫–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å—é',
          positive_lexicon: ['–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'],
          negative_lexicon: ['—à–∞–±–ª–æ–Ω–Ω–æ', '–±–∞–Ω–∞–ª—å–Ω–æ', '—Å–∫—É—á–Ω–æ'],
          writing_style: {
            tone: 'friendly',
            formality: 'casual',
            emoji_usage: 'moderate',
            paragraph_length: 'medium'
          },
          examples: []
        };
        setUserStyle(defaultStyle);
      }
    } catch (err: any) {
      console.error('Error loading user style:', err);
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç–∏–ª—è';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const saveUserStyle = async (updatedStyle: UserStyle) => {
    if (!user || !updatedStyle) return;

    try {
      setSaving(true);
      setError(null);

      // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏–ª–∏ –±–µ–∑ Telegram –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      if (process.env.REACT_APP_DEMO_MODE === 'true' || !window.Telegram?.WebApp?.initDataUnsafe?.user) {
        console.log('Demo mode: simulating save', updatedStyle);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        setUserStyle(updatedStyle);
        
        const message = !window.Telegram?.WebApp?.initDataUnsafe?.user
          ? '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–¥–µ–º–æ-—Ä–µ–∂–∏–º)!\n\n–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram.'
          : '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–¥–µ–º–æ-—Ä–µ–∂–∏–º)!\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Supabase –≤ —Ñ–∞–π–ª–µ .env';
        
        alert(message);
        
      } else {
        // –†–µ–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
        const { error } = await supabase
          .from('user_styles')
          .upsert(updatedStyle, { 
            onConflict: 'user_id',
            ignoreDuplicates: false 
          });

        if (error) throw error;

        setUserStyle(updatedStyle);
        alert('–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
      }

    } catch (err: any) {
      console.error('Error saving user style:', err);
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç–∏–ª—è';
      setError(errorMessage);
    } finally {
      setSaving(false);
    }
  };

  const handleStyleChange = (updatedStyle: UserStyle) => {
    setUserStyle(updatedStyle);
  };

  const handleSave = () => {
    if (userStyle) {
      saveUserStyle(userStyle);
    }
  };

  if (loading) {
    return (
      <div className="app">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∏–ª—è...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app">
        <div className="error">
          <h3>–û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button onClick={() => window.location.reload()}>
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="app">
      <header className="app-header">
        <h1>üé® –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∏–ª—è</h1>
        {(!window.Telegram?.WebApp?.initDataUnsafe?.user || process.env.REACT_APP_DEMO_MODE === 'true') && (
          <div className="demo-banner">
            {!window.Telegram?.WebApp?.initDataUnsafe?.user 
              ? 'üåê –î–µ–º–æ-—Ä–µ–∂–∏–º | –û—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏' 
              : 'üî¨ –î–µ–º–æ-—Ä–µ–∂–∏–º | –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Supabase –≤ .env'
            }
          </div>
        )}
        {user && (
          <p className="user-info">
            –ü—Ä–∏–≤–µ—Ç, {user.firstName}! 
            {window.Telegram?.WebApp?.initDataUnsafe?.user 
              ? ' –ù–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Å—Ç–∏–ª—å.' 
              : ' (–î–µ–º–æ-–≤–µ—Ä—Å–∏—è) –ù–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Å—Ç–∏–ª—å.'
            }
          </p>
        )}
      </header>

      <main className="app-main">
        {userStyle && (
          <StyleEditor
            style={userStyle}
            onChange={handleStyleChange}
            saving={saving}
          />
        )}
        
        <div className="save-section">
          <button 
            className="save-button"
            onClick={handleSave}
            disabled={saving}
          >
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
          </button>
        </div>
      </main>
    </div>
  );
}

export default App; 