import React, { useState, useEffect } from 'react';
import { initData, mainButton, backButton } from '@telegram-apps/sdk';
import { createClient } from '@supabase/supabase-js';
import StyleEditor from './components/StyleEditor';
import './App.css';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface UserStyle {
  id?: number;
  user_id: number;
  style_summary: string;
  positive_lexicon: string[];
  negative_lexicon: string[];
  writing_style: {
    tone: string;
    formality: string;
    emoji_usage: string;
    paragraph_length: string;
  };
  examples: string[];
}

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
}

function App() {
  const [user, setUser] = useState<TelegramUser | null>(null);
  const [userStyle, setUserStyle] = useState<UserStyle | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
  const supabase = createClient(
    process.env.REACT_APP_SUPABASE_URL!,
    process.env.REACT_APP_SUPABASE_ANON_KEY!
  );

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    try {
      const initDataParsed = initData.parse();
      
      if (initDataParsed?.user) {
        setUser(initDataParsed.user);
        loadUserStyle(initDataParsed.user.id);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        setLoading(false);
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram
      mainButton.setParams({
        text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        isVisible: false
      });

      backButton.show();

    } catch (err) {
      console.error('Error initializing Telegram Web App:', err);
      setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App');
      setLoading(false);
    }
  }, []);

  const loadUserStyle = async (userId: number) => {
    try {
      setLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data, error } = await supabase
        .from('user_styles')
        .select('*')
        .eq('user_id', userId)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        throw error;
      }

      if (data) {
        setUserStyle(data);
      } else {
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const defaultStyle: UserStyle = {
          user_id: userId,
          style_summary: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å —Å –ª–µ–≥–∫–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å—é',
          positive_lexicon: ['–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'],
          negative_lexicon: ['—à–∞–±–ª–æ–Ω–Ω–æ', '–±–∞–Ω–∞–ª—å–Ω–æ', '—Å–∫—É—á–Ω–æ'],
          writing_style: {
            tone: 'friendly',
            formality: 'casual',
            emoji_usage: 'moderate',
            paragraph_length: 'medium'
          },
          examples: []
        };
        setUserStyle(defaultStyle);
      }
    } catch (err) {
      console.error('Error loading user style:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç–∏–ª—è');
    } finally {
      setLoading(false);
    }
  };

  const saveUserStyle = async (updatedStyle: UserStyle) => {
    if (!user || !updatedStyle) return;

    try {
      setSaving(true);
      setError(null);

      const { error } = await supabase
        .from('user_styles')
        .upsert(updatedStyle, { 
          onConflict: 'user_id',
          ignoreDuplicates: false 
        });

      if (error) throw error;

      setUserStyle(updatedStyle);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      mainButton.setParams({
        text: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úì',
        isVisible: true
      });

      setTimeout(() => {
        mainButton.setParams({
          text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
          isVisible: false
        });
      }, 2000);

    } catch (err) {
      console.error('Error saving user style:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç–∏–ª—è');
    } finally {
      setSaving(false);
    }
  };

  const handleStyleChange = (updatedStyle: UserStyle) => {
    setUserStyle(updatedStyle);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    mainButton.setParams({
      text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
      isVisible: true
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    mainButton.onClick(() => saveUserStyle(updatedStyle));
  };

  if (loading) {
    return (
      <div className="app">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∏–ª—è...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app">
        <div className="error">
          <h3>–û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button onClick={() => window.location.reload()}>
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="app">
      <header className="app-header">
        <h1>üé® –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∏–ª—è</h1>
        {user && (
          <p className="user-info">
            –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ù–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Å—Ç–∏–ª—å.
          </p>
        )}
      </header>

      <main className="app-main">
        {userStyle && (
          <StyleEditor
            style={userStyle}
            onChange={handleStyleChange}
            saving={saving}
          />
        )}
      </main>
    </div>
  );
}

export default App; 