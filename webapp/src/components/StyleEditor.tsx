import React, { useState } from 'react';
import './StyleEditor.css';

interface UserStyle {
  id?: number;
  user_id: number;
  style_summary: string;
  positive_lexicon: string[];
  negative_lexicon: string[];
  writing_style: {
    tone: string;
    formality: string;
    emoji_usage: string;
    paragraph_length: string;
  };
  examples: string[];
}

interface StyleEditorProps {
  style: UserStyle;
  onChange: (style: UserStyle) => void;
  saving: boolean;
}

const StyleEditor: React.FC<StyleEditorProps> = ({ style, onChange, saving }) => {
  const [activeTab, setActiveTab] = useState<'summary' | 'lexicon' | 'writing' | 'examples'>('summary');

  const handleStyleChange = (field: keyof UserStyle, value: any) => {
    const updatedStyle = { ...style, [field]: value };
    onChange(updatedStyle);
  };

  const handleWritingStyleChange = (field: string, value: string) => {
    const updatedWritingStyle = { ...style.writing_style, [field]: value };
    handleStyleChange('writing_style', updatedWritingStyle);
  };

  const handleLexiconChange = (type: 'positive_lexicon' | 'negative_lexicon', value: string) => {
    const words = value.split(',').map(word => word.trim()).filter(word => word.length > 0);
    handleStyleChange(type, words);
  };



  const addExample = () => {
    const newExample = prompt('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:');
    if (newExample && newExample.trim()) {
      const updatedExamples = [...style.examples, newExample.trim()];
      handleStyleChange('examples', updatedExamples);
    }
  };

  const removeExample = (index: number) => {
    const updatedExamples = style.examples.filter((_, i) => i !== index);
    handleStyleChange('examples', updatedExamples);
  };

  return (
    <div className="style-editor">
      {/* –¢–∞–±—ã */}
      <div className="tabs">
        <button 
          className={`tab ${activeTab === 'summary' ? 'active' : ''}`}
          onClick={() => setActiveTab('summary')}
        >
          üìù –û–ø–∏—Å–∞–Ω–∏–µ
        </button>
        <button 
          className={`tab ${activeTab === 'lexicon' ? 'active' : ''}`}
          onClick={() => setActiveTab('lexicon')}
        >
          üìñ –°–ª–æ–≤–∞—Ä—å
        </button>
        <button 
          className={`tab ${activeTab === 'writing' ? 'active' : ''}`}
          onClick={() => setActiveTab('writing')}
        >
          ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        </button>
        <button 
          className={`tab ${activeTab === 'examples' ? 'active' : ''}`}
          onClick={() => setActiveTab('examples')}
        >
          üí° –ü—Ä–∏–º–µ—Ä—ã
        </button>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
      <div className="tab-content">
        {activeTab === 'summary' && (
          <div className="section">
            <h3>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è</h3>
            <p className="description">
              –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Å—Ç–∏–ª—å - –∫–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –ø–∏—à–µ—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ.
            </p>
            <textarea
              value={style.style_summary}
              onChange={(e) => handleStyleChange('style_summary', e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å —Å —é–º–æ—Ä–æ–º..."
              rows={6}
              disabled={saving}
            />
          </div>
        )}

        {activeTab === 'lexicon' && (
          <div className="section">
            <div className="lexicon-section">
              <h3>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å–ª–æ–≤–∞</h3>
              <p className="description">
                –°–ª–æ–≤–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∏ –ª—é–±–∏—Ç–µ.
              </p>
              <textarea
                value={style.positive_lexicon.join(', ')}
                onChange={(e) => handleLexiconChange('positive_lexicon', e.target.value)}
                placeholder="–æ—Ç–ª–∏—á–Ω–æ, –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ..."
                rows={3}
                disabled={saving}
              />
            </div>

            <div className="lexicon-section">
              <h3>–ò–∑–±–µ–≥–∞–µ–º—ã–µ —Å–ª–æ–≤–∞</h3>
              <p className="description">
                –°–ª–æ–≤–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
              </p>
              <textarea
                value={style.negative_lexicon.join(', ')}
                onChange={(e) => handleLexiconChange('negative_lexicon', e.target.value)}
                placeholder="—à–∞–±–ª–æ–Ω–Ω–æ, –±–∞–Ω–∞–ª—å–Ω–æ, —Å–∫—É—á–Ω–æ..."
                rows={3}
                disabled={saving}
              />
            </div>
          </div>
        )}

        {activeTab === 'writing' && (
          <div className="section">
            <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è</h3>
            
            <div className="setting-group">
              <label>–¢–æ–Ω:</label>
              <select
                value={style.writing_style.tone}
                onChange={(e) => handleWritingStyleChange('tone', e.target.value)}
                disabled={saving}
              >
                <option value="formal">–§–æ—Ä–º–∞–ª—å–Ω—ã–π</option>
                <option value="neutral">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</option>
                <option value="friendly">–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π</option>
                <option value="casual">–ù–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π</option>
                <option value="humorous">–° —é–º–æ—Ä–æ–º</option>
              </select>
            </div>

            <div className="setting-group">
              <label>–§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å:</label>
              <select
                value={style.writing_style.formality}
                onChange={(e) => handleWritingStyleChange('formality', e.target.value)}
                disabled={saving}
              >
                <option value="very_formal">–û—á–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ</option>
                <option value="formal">–§–æ—Ä–º–∞–ª—å–Ω–æ</option>
                <option value="casual">–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ</option>
                <option value="very_casual">–û—á–µ–Ω—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ</option>
              </select>
            </div>

            <div className="setting-group">
              <label>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏:</label>
              <select
                value={style.writing_style.emoji_usage}
                onChange={(e) => handleWritingStyleChange('emoji_usage', e.target.value)}
                disabled={saving}
              >
                <option value="none">–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</option>
                <option value="minimal">–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ</option>
                <option value="moderate">–£–º–µ—Ä–µ–Ω–Ω–æ</option>
                <option value="frequent">–ß–∞—Å—Ç–æ</option>
              </select>
            </div>

            <div className="setting-group">
              <label>–î–ª–∏–Ω–∞ –∞–±–∑–∞—Ü–µ–≤:</label>
              <select
                value={style.writing_style.paragraph_length}
                onChange={(e) => handleWritingStyleChange('paragraph_length', e.target.value)}
                disabled={saving}
              >
                <option value="short">–ö–æ—Ä–æ—Ç–∫–∏–µ</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–µ</option>
                <option value="long">–î–ª–∏–Ω–Ω—ã–µ</option>
              </select>
            </div>
          </div>
        )}

        {activeTab === 'examples' && (
          <div className="section">
            <h3>–ü—Ä–∏–º–µ—Ä—ã –ø–æ—Å—Ç–æ–≤</h3>
            <p className="description">
              –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤, —á—Ç–æ–±—ã AI –ª—É—á—à–µ –ø–æ–Ω—è–ª –≤–∞—à —Å—Ç–∏–ª—å.
            </p>
            
            {style.examples.map((example, index) => (
              <div key={index} className="example-item">
                <div className="example-content">{example}</div>
                <button 
                  className="remove-example"
                  onClick={() => removeExample(index)}
                  disabled={saving}
                >
                  ‚ùå
                </button>
              </div>
            ))}

            <button 
              className="add-example"
              onClick={addExample}
              disabled={saving}
            >
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä
            </button>

            {style.examples.length === 0 && (
              <div className="no-examples">
                –ü—Ä–∏–º–µ—Ä—ã –ø–æ—Å—Ç–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
              </div>
            )}
          </div>
        )}
      </div>

      {saving && (
        <div className="saving-indicator">
          <div className="spinner small"></div>
          –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
        </div>
      )}
    </div>
  );
};

export default StyleEditor; 